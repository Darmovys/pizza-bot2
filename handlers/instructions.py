import os
from typing import Any
from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.scene import Scene, on
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from utils.functions import (get_pizzas, file_exists,
                             insert_object, update_pizza_title, update_pizza_types, delete_pizza_size,
                             insert_pizza_size, update_pizza_size, update_pizza_price, update_pizza_photo,
                             delete_pizza)
from keyboards import main, add_pizza, change_pizza
from utils.states import StartStatus, SendData

types = ["—Ç–æ–Ω–∫–∞", "—Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞"]

TOKEN = "Insert your token API"
CODE = "supersecretpassword"
CHANNEL_FOR_RECEIVING_ORDERS = "Insert your channel ID"

bot = Bot(TOKEN)


class ChangePizzaPhoto(Scene, state="change_pizza_photo"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        await state.update_data(imageUrl=pizza["imageUrl"])
        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—É –∫–∞—Ä—Ç–∏–Ω–∫—É —è–∫ —Ñ–∞–π–ª. üëá',
            reply_markup=ReplyKeyboardRemove()
        )

    @on.message(F.document)
    async def upload_file(self, message: Message, state: FSMContext) -> Any:
        if file_exists(message.document.file_name):
            await message.answer("–§–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        else:
            data = await state.get_data()
            pizza_id = data["pizza_id"]
            step = data["step"]
            image_url = data["imageUrl"]
            os.remove(image_url)
            file_name = f"./static/Img/{message.document.file_name}"
            await bot.download(message.document, destination=file_name)
            update_pizza_photo(pizza_id, file_name)
            await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫—É –¥–æ–¥–∞–Ω–æ.")
            return await self.wizard.goto(ChangePizza, step=step)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChangePizzaPrice(Scene, state="change_pizza_price"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f'–¶—ñ–Ω–∞ ‚Äì {pizza["price"]} –≥—Ä–Ω. –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É üëá',
            reply_markup=ReplyKeyboardRemove()
        )

    @on.message(F.text)
    async def change_price(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit():
            data = await state.get_data()
            pizza_id = data["pizza_id"]
            step = data["step"]
            update_pizza_price(pizza_id, int(message.text))
            await message.answer("–¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ.")
            return await self.wizard.goto(ChangePizza, step=step)
        else:
            await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class UpdatePizzaSize(Scene, state="update_pizza_size"):
    sizes = []

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        CheckPizzaSize.sizes = pizza["sizes"]
        await message.answer(
            text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä",
            reply_markup=ReplyKeyboardRemove()
        )

    @on.message(F.text)
    async def change_size(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit():
            msg = int(message.text)
            if msg in CheckPizzaSize.sizes:
                await message.answer(text="–¢–∞–∫–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∂–µ —î")
            else:
                if msg < 27:
                    await message.answer(text="–ù–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 27 —Å–º.")
                else:
                    data = await state.get_data()
                    pizza_id = data["pizza_id"]
                    selected_size = data["selected_size"]
                    update_pizza_size(pizza_id, selected_size, msg)
                    await message.answer("–†–æ–∑–º—ñ—Ä –∑–º—ñ–Ω–µ–Ω–æ")
                    return await self.wizard.goto(ChangePizzaSizes)
        else:
            await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class CheckPizzaSize(Scene, state="check_pizza_size"):
    sizes = []

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        CheckPizzaSize.sizes = pizza["sizes"]
        markup = ReplyKeyboardBuilder()
        for i in pizza["sizes"]:
            if i == 26:
                continue
            else:
                markup.button(text=str(i))

        await message.answer(
            text="–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏.",
            reply_markup=markup.adjust(2).as_markup(resize_keyboard=True)
        )

    @on.message(F.text)
    async def choose_size(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit():
            msg = int(message.text)
            if msg in CheckPizzaSize.sizes:
                if msg != 26:
                    index = CheckPizzaSize.sizes.index(msg)
                    await state.update_data(selected_size=index)
                    return await self.wizard.goto(UpdatePizzaSize)
                else:
                    await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –Ω–µ–º–∞—î")
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –Ω–µ–º–∞—î")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class AddNewPizzaSize(Scene, state="add_new_pizza_size"):
    sizes = []

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        AddNewPizzaSize.sizes = pizza["sizes"]
        await message.answer(text="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä (–Ω–µ –º–µ–Ω—à–µ 27 —Å–º)", reply_markup=ReplyKeyboardRemove())

    @on.message(F.text)
    async def add_new_size(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit():
            msg = int(message.text)
            if msg in AddNewPizzaSize.sizes:
                await message.answer(text="–¢–∞–∫–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∂–µ —î")
            else:
                if msg < 27:
                    await message.answer(text="–†–æ–∑–º—ñ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 27 —Å–º")
                else:
                    data = await state.get_data()
                    pizza_id = data["pizza_id"]
                    insert_pizza_size(pizza_id, msg)
                    await message.answer(text="–†–æ–∑–º—ñ—Ä –¥–æ–¥–∞–Ω–æ")
                    return await self.wizard.goto(ChangePizzaSizes)
        else:
            await message.answer(text="–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–≤—ñ–¥")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class DeletePizzaSize(Scene, state="delete_pizza_size"):
    sizes = []

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        DeletePizzaSize.sizes = pizza["sizes"]
        markup = ReplyKeyboardBuilder()
        for i in pizza["sizes"]:
            if i == 26:
                continue
            else:
                markup.button(text=str(i))

        await message.answer(
            text="–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏.",
            reply_markup=markup.adjust(2).as_markup(resize_keyboard=True)
        )

    @on.message(F.text)
    async def delete_size(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit():
            msg = int(message.text)
            if msg in DeletePizzaSize.sizes:
                if msg != 26:
                    data = await state.update_data()
                    pizza_id = data["pizza_id"]
                    delete_pizza_size(pizza_id, msg)
                    await message.answer(f"–†–æ–∑–º—ñ—Ä {msg} –≤–∏–¥–∞–ª–µ–Ω–æ")
                    return await self.wizard.goto(ChangePizzaSizes)
                else:
                    await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –Ω–µ–º–∞—î")
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –Ω–µ–º–∞—î")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class ChangePizzaSizes(Scene, state="change_pizza_sizes"):
    sizes_p = []

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:

        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        ChangePizzaSizes.sizes_p = pizza["sizes"]
        pizza_sizes = ""
        markup = ReplyKeyboardBuilder()
        markup.button(text="–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
        markup.button(text="–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
        markup.button(text="–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
        markup.button(text="‚úî –ì–æ—Ç–æ–≤–æ")
        for size in pizza["sizes"]:
            pizza_sizes += str(size) + ", "
        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f"–†–æ–∑–º—ñ—Ä–∏ ‚Äì {pizza_sizes[:-2]}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é",
            reply_markup=markup.adjust(3, 1).as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
    async def delete_size(self, message: Message) -> Any:
        if len(ChangePizzaSizes.sizes_p) == 1:
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
        else:
            await self.wizard.goto(DeletePizzaSize)

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
    async def add_size(self, message: Message) -> Any:
        if len(ChangePizzaSizes.sizes_p) <= 3:
            await self.wizard.goto(AddNewPizzaSize)
        else:
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 4-—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤")

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
    async def change_size(self, message: Message) -> Any:
        if len(ChangePizzaSizes.sizes_p) == 1:
            await message.answer("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
        else:
            await self.wizard.goto(CheckPizzaSize)

    @on.message(F.text == "‚úî –ì–æ—Ç–æ–≤–æ")
    async def done(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        step = data["step"]
        return await self.wizard.goto(ChangePizza, step=step)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChangePizzaTypes(Scene, state="change_pizza_types"):
    thin = bool
    traditional = bool
    both = bool

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        ChangePizzaTypes.thin = True
        ChangePizzaTypes.traditional = True
        ChangePizzaTypes.both = True
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        types_i = pizza["types"]
        pizza_types = ""
        for i in types_i:
            pizza_types += types[i] + ", "
        markup = ReplyKeyboardBuilder()
        if 0 in types_i and 1 in types_i:
            markup.button(text="–¢–æ–Ω–∫–∞")
            markup.button(text="–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
            ChangePizzaTypes.thin = False
            ChangePizzaTypes.traditional = False
        elif 0 in types_i:
            markup.button(text="–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
            markup.button(text="–¢–æ–Ω–∫–∞ —ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
            ChangePizzaTypes.traditional = False
            ChangePizzaTypes.both = False
        else:
            markup.button(text="–¢–æ–Ω–∫–∞")
            markup.button(text="–¢–æ–Ω–∫–∞ —ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
            ChangePizzaTypes.thin = False
            ChangePizzaTypes.both = False

        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f"–¢–∏–ø–∏ ‚Äì {pizza_types[:-2]}\n\n–ó–∞–º—ñ–Ω—ñ—Ç—å —Ç–∏–ø –ø—ñ—Ü–∏",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "–¢–æ–Ω–∫–∞")
    async def thin_type(self, message: Message, state: FSMContext) -> Any:
        if ChangePizzaTypes.thin:
            return await message.answer("–¶–µ–π —Ç–∏–ø –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        data = await state.update_data()
        step = data["step"]
        pizza_id = data["pizza_id"]
        update_pizza_types(pizza_id, [0])
        await message.answer("–¢–∏–ø –ó–º—ñ–Ω–µ–Ω–æ.")
        await self.wizard.goto(ChangePizza, step=step)

    @on.message(F.text == "–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
    async def traditional_type(self, message: Message, state: FSMContext) -> Any:
        if ChangePizzaTypes.traditional:
            return await message.answer("–¶–µ–π —Ç–∏–ø –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        data = await state.update_data()
        step = data["step"]
        pizza_id = data["pizza_id"]
        update_pizza_types(pizza_id, [1])
        await message.answer("–¢–∏–ø –ó–º—ñ–Ω–µ–Ω–æ.")
        await self.wizard.goto(ChangePizza, step=step)

    @on.message(F.text == "–¢–æ–Ω–∫–∞ —ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
    async def both_types(self, message: Message, state: FSMContext) -> Any:
        if ChangePizzaTypes.both:
            return await message.answer("–¶–µ–π —Ç–∏–ø –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        data = await state.update_data()
        step = data["step"]
        pizza_id = data["pizza_id"]
        update_pizza_types(pizza_id, [0, 1])
        await message.answer("–¢–∏–ø –ó–º—ñ–Ω–µ–Ω–æ.")
        await self.wizard.goto(ChangePizza, step=step)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class ChangePizzaTitle(Scene, state="change_pizza_title"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizzas = get_pizzas()
        pizza = pizzas[data["step"]]
        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f"{pizza['title']}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É üëá",
            reply_markup=ReplyKeyboardRemove()
        )

    @on.message(F.text)
    async def change_title(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizza_id = data["pizza_id"]
        step = data["step"]
        update_pizza_title(pizza_id, message.text)
        await message.answer("–ù–∞–∑–≤—É –∑–º—ñ–Ω–µ–Ω–æ.")
        return await self.wizard.goto(ChangePizza, step=step)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChangePizzaSelected(Scene, state="change_pizza_selected"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        await message.answer(text="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=change_pizza)

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É")
    async def change_title(self, message: Message) -> Any:
        return await self.wizard.goto(ChangePizzaTitle)

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–ø")
    async def change_type(self, message: Message) -> Any:
        return await self.wizard.goto(ChangePizzaTypes)

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
    async def change_size(self, message: Message) -> Any:
        return await self.wizard.goto(ChangePizzaSizes)

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É")
    async def change_price(self, message: Message) -> Any:
        return await self.wizard.goto(ChangePizzaPrice)

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
    async def change_picture(self, message: Message) -> Any:
        return await self.wizard.goto(ChangePizzaPhoto)

    @on.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ—Ü—É")
    async def add_picture(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizza = data["pizza"]
        pizza_id = data["pizza_id"]
        image_url = pizza["imageUrl"]
        os.remove(image_url)
        delete_pizza(pizza_id)
        await message.answer(text="–ü—ñ—Ü—É –≤–∏–¥–∞–ª–µ–Ω–æ")
        return await self.wizard.goto(ChangePizza)

    @on.message(F.text == "‚úî –ì–æ—Ç–æ–≤–æ")
    async def done(self, message: Message, state: FSMContext) -> Any:
        data = await state.update_data()
        step = data["step"]
        return await self.wizard.goto(ChangePizza, step=step)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChangePizza(Scene, state="change_pizza"):
    id = ''

    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext, step: int | None = 0) -> Any:
        data = await state.get_data()
        if step is None:
            step = data["step"]
        pizzas = get_pizzas()
        p_len = len(pizzas)

        pizza = pizzas[step]

        ChangePizza.id = pizza["_id"]
        markup = ReplyKeyboardBuilder()
        markup.button(text="‚öô –ó–º—ñ–Ω–∏—Ç–∏")
        if not step == p_len - 1:
            markup.button(text="‚û° –î–∞–ª—ñ")
        if step > 0:
            markup.button(text="‚¨Ö –ù–∞–∑–∞–¥")
        markup.button(text="üö´ –í–∏—Ö—ñ–¥")

        await state.update_data(step=step)
        await state.update_data(pizza=pizza)
        types_i = pizza["types"]
        sizes = pizza["sizes"]
        pizza_types = ""
        pizza_sizes = ""
        for i in types_i:
            pizza_types += types[i] + ", "
        for size in sizes:
            pizza_sizes += str(size) + ", "

        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f'''
                {pizza["title"]}\n
                –¶—ñ–Ω–∞ ‚Äì {pizza["price"]} –≥—Ä–Ω.\n
                –¢–∏–ø–∏ ‚Äì {pizza_types[:-2]}\n
                –†–æ–∑–º—ñ—Ä–∏ ‚Äì {pizza_sizes[:-2]} —Å–º.\n
            ''',
            reply_markup=markup.adjust(1, 2, 1).as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "‚öô –ó–º—ñ–Ω–∏—Ç–∏")
    async def choose_pizza(self, message: Message, state: FSMContext) -> None:
        await state.update_data(pizza_id=ChangePizza.id)
        return await self.wizard.goto(ChangePizzaSelected)

    @on.message(F.text == "‚û° –î–∞–ª—ñ")
    async def next_pizza(self, message: Message, state: FSMContext) -> None:
        pizzas = get_pizzas()
        p_len = len(pizzas)
        data = await state.get_data()
        step = data["step"]
        if step == p_len - 1:
            await message.answer("–¶–µ –æ—Å—Ç–∞–Ω–Ω—è –ø—ñ—Ü–∞")
            await self.wizard.retake(step=step)
        else:
            await self.wizard.retake(step=step + 1)

    @on.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
    async def previous_pizza(self, message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        step = data["step"]
        previous_step = step - 1
        if previous_step < 0:
            await message.answer("–¶–µ –ø–µ—Ä—à–∞ –ø—ñ—Ü–∞")
            await self.wizard.retake(step=step)
        else:
            await self.wizard.retake(step=previous_step)

    @on.message(F.text == "üö´ –í–∏—Ö—ñ–¥")
    async def cancel(self, message: Message, state: FSMContext) -> Any:
        await state.clear()
        return await self.wizard.goto(CatalogSettings)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class SendContact(Scene, state="send_contact"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        markup = ReplyKeyboardBuilder()
        markup.button(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        await message.answer(
            text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.contact)
    async def contact(self, message: Message, state: FSMContext) -> Any:
        await message.answer(text="–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç...")
        await state.update_data(phone_num=message.contact.phone_number)
        await state.update_data(contact_name=message.contact.first_name)
        await state.update_data(contact_username=message.chat.username)
        await self.wizard.goto(SendLocation)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class SendLocation(Scene, state="send_location"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        markup = ReplyKeyboardBuilder()
        markup.button(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True)
        await message.answer(
            text="–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. \n–ù–∞ —Ä–∞–∑—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –º–æ–±—ñ–ª—å–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –¢–µ–ª–µ–≥—Ä–∞–º—É",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.location)
    async def location(self, message: Message, state: FSMContext) -> Any:
        await state.update_data(latitude=message.location.latitude)
        await state.update_data(longitude=message.location.longitude)
        markup = ReplyKeyboardBuilder()
        markup.button(text="–ì–æ—Ç–æ–≤–æ")
        await message.answer(
            text='–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ".',
            reply_markup=markup.as_markup(resize_keyboard=True)
        )
        await state.set_state(SendData.sending)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class Summary(Scene, state="summary"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        size = data["size"]
        price = data["pizza"]["price"]
        pizza_type = data["type"]
        number_of = data["numberOf"]
        if size > 26:
            price += 5 * (size - 26)
        total_price = price * int(number_of)
        markup = ReplyKeyboardBuilder()
        markup.button(text="‚úî –ì–æ—Ç–æ–≤–æ")
        markup.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
        await state.update_data(total_price=total_price)
        await message.answer_photo(
            photo=FSInputFile(
                path=data["pizza"]["imageUrl"]
            ),
            caption=f'''{data["pizza"]["title"]}\n
            –¶—ñ–Ω–∞ ‚Äì {total_price} –≥—Ä–Ω.\n
            –¢–∏–ø ‚Äì {pizza_type}\n
            –†–æ–∑–º—ñ—Ä ‚Äì {size} —Å–º.\n
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å ‚Äì {number_of} —à—Ç.''',
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "‚úî –ì–æ—Ç–æ–≤–æ")
    async def done(self, message: Message) -> Any:
        return await self.wizard.goto(SendContact)

    @on.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel(self, message: Message, state: FSMContext) -> Any:
        await message.answer(text="‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        await state.clear()
        await message.answer(
            "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.",
            reply_markup=main,
        )
        await state.clear()
        await state.set_state(StartStatus.choose)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChooseNumOf(Scene, state="choose_num_of"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        await message.answer(
            text="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—Ä–∞–Ω–æ—ó –ø—ñ—Ü–∏, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏.",
            reply_markup=ReplyKeyboardRemove()
        )

    @on.message(F.text)
    async def num_of(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit() and message.text != "0":
            await state.update_data(numberOf=int(message.text))
            return await self.wizard.goto(Summary)
        else:
            await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É.")

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChooseSize(Scene, state="choose_size"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizza = data["pizza"]
        sizes_i = pizza["sizes"]
        markup = ReplyKeyboardBuilder()
        for i in sizes_i:
            markup.button(text=str(i))
        await message.answer(
            text="–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –ø—ñ—Ü–∏.\n–¶—ñ–Ω–∞ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ 5 –≥—Ä–Ω. –∑–∞ –∫–æ–∂–µ–Ω —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä –Ω–∞ —è–∫–∏–π —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î 26 —Å–º",
            reply_markup=markup.adjust(2).as_markup(resize_keyboard=True)
        )

    @on.message(F.text)
    async def size(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizza = data["pizza"]
        sizes_i = pizza["sizes"]
        for i in sizes_i:
            if message.text == str(i):
                await state.update_data(size=int(message.text))
                return await self.wizard.goto(ChooseNumOf)
        return await message.answer(text="–¢–∞–∫–æ—ó –ø—ñ—Ü–∏ –Ω–µ–º–∞—î.")

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class ChooseType(Scene, state="choose_type"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizza = data["pizza"]
        types_i = pizza["types"]
        markup = ReplyKeyboardBuilder()
        for i in types_i:
            markup.button(text=types[i])
        await message.answer(
            text="–í–∏–±–µ—Ä–∏ —Ç–∏–ø –ø—ñ—Ü–∏",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.text)
    async def type(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        pizza = data["pizza"]
        types_i = pizza["types"]
        for i in types_i:
            if message.text == types[i]:
                await state.update_data(type=message.text)
                return await self.wizard.goto(ChooseSize)
        return await message.answer(text="–¢–∞–∫–æ—ó –ø—ñ—Ü–∏ –Ω–µ–º–∞—î.")

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class CatalogScene(Scene, state="catalog"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext, step: int | None = 0) -> Any:

        pizzas = get_pizzas()
        p_len = len(pizzas)

        pizza = pizzas[step]

        markup = ReplyKeyboardBuilder()
        markup.button(text="‚úî –û–±—Ä–∞—Ç–∏")
        if not step == p_len - 1:
            markup.button(text="‚û° –î–∞–ª—ñ")
        if step > 0:
            markup.button(text="‚¨Ö –ù–∞–∑–∞–¥")
        markup.button(text="üö´ –í–∏—Ö—ñ–¥")

        await state.update_data(step=step)
        await state.update_data(pizza=pizza)
        await message.reply_photo(
            photo=FSInputFile(
                path=pizza["imageUrl"]
            ),
            caption=f'{pizza["title"]}\n–¶—ñ–Ω–∞ ‚Äì {pizza["price"]} –≥—Ä–Ω. –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä ',
            reply_markup=markup.adjust(1, 2, 1).as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "‚úî –û–±—Ä–∞—Ç–∏")
    async def choose_pizza(self, message: Message) -> None:
        return await self.wizard.goto(ChooseType)

    @on.message(F.text == "‚û° –î–∞–ª—ñ")
    async def next_pizza(self, message: Message, state: FSMContext) -> None:
        pizzas = get_pizzas()
        p_len = len(pizzas)
        data = await state.get_data()
        step = data["step"]
        if step == p_len - 1:
            await message.answer("–¶–µ –æ—Å—Ç–∞–Ω–Ω—è –ø—ñ—Ü–∞")
            await self.wizard.retake(step=step)
        else:
            await self.wizard.retake(step=step + 1)

    @on.message(F.text == "‚¨Ö –ù–∞–∑–∞–¥")
    async def previous_pizza(self, message: Message, state: FSMContext) -> None:
        data = await state.get_data()
        step = data["step"]
        previous_step = step - 1
        if previous_step < 0:
            await message.answer("–¶–µ –ø–µ—Ä—à–∞ –ø—ñ—Ü–∞")
            await self.wizard.retake(step=step)
        else:
            await self.wizard.back(step=previous_step)

    @on.message(F.text == "üö´ –í–∏—Ö—ñ–¥")
    async def cancel(self, message: Message, state: FSMContext) -> Any:
        await message.answer(
            "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.",
            reply_markup=main,
        )
        await state.clear()
        await state.set_state(StartStatus.choose)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class AddPizzaDone(Scene, state="add_pizza_done"):
    @on.message.enter()
    async def on_enter(self, message: Message, state: FSMContext) -> Any:
        data = await state.get_data()
        if "title" not in data:
            await message.answer("–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –Ω–∞–∑–≤—É –ø—ñ—Ü–∏.")
            return await self.wizard.goto(AddPizza)
        elif "types" not in data:
            await message.answer("–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ —Ç–∏–ø –ø—ñ—Ü–∏.")
            return await self.wizard.goto(AddPizza)
        elif "price" not in data:
            await message.answer("–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ —Ü—ñ–Ω—É –ø—ñ—Ü–∏.")
            return await self.wizard.goto(AddPizza)
        elif "image" not in data:
            await message.answer("–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø—ñ—Ü–∏.")
            return await self.wizard.goto(AddPizza)
        else:
            if "sizes" not in data:
                data.update(sizes=[26])
            image = data["image"]
            image_name = data["image_name"]
            file_name = f"./static/Img/{image_name}"
            await bot.download(image, destination=file_name)
            data.update(imageUrl=file_name)
            insert_object(data)
            await state.clear()
            pizzas = get_pizzas()
            await self.wizard.set_data({"pizzas": pizzas})
            await message.answer("–ü—ñ—Ü—É –¥–æ–¥–∞–Ω–æ")
            return await self.wizard.goto(CatalogSettings)


class AddPizzaPhoto(Scene, state="add_pizza_photo"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—ñ—Ü–∏\n(–£ –≤–∏–≥–ª—è–¥—ñ —Ñ–∞–π–ª—É. –¶–µ –≤–∞–∂–ª–∏–≤–æ!)")

    @on.message(F.document)
    async def upload_file(self, message: Message, state: FSMContext) -> Any:
        if file_exists(message.document.file_name):
            await message.answer("–§–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.")
        else:
            await state.update_data(image=message.document)
            await state.update_data(image_name=message.document.file_name)
            await message.answer("–ö–∞—Ä—Ç–∏–Ω–∫—É –¥–æ–¥–∞–Ω–æ.")
            return await self.wizard.goto(AddPizza)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class AddPizzaPrice(Scene, state="add_pizza_price"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É", reply_markup=ReplyKeyboardRemove())

    @on.message(F.text)
    async def new_price(self, message: Message, state: FSMContext) -> Any:
        if message.text.isdigit():
            await state.update_data(price=int(message.text))
            await message.answer("–¶—ñ–Ω—É –¥–æ–¥–∞–Ω–æ")
            return await self.wizard.goto(AddPizza)
        else:
            await message.answer("–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class AddPizzaSize(Scene, state="add_pizza_size"):
    sizes = []

    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        sizes = AddPizzaSize.sizes
        sizes.clear()
        sizes.append(26)
        markup = ReplyKeyboardBuilder()
        markup.button(text="–ì–æ—Ç–æ–≤–æ")
        await message.answer(
            "–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –ø—ñ—Ü–∏ (–Ω–µ –º–µ–Ω—à–µ 27—Å–º.)",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "–ì–æ—Ç–æ–≤–æ")
    async def done(self, message: Message, state: FSMContext) -> Any:
        sizes = AddPizzaSize.sizes
        sizes.sort()
        await state.update_data(sizes=sizes)
        return await self.wizard.goto(AddPizza)

    @on.message(F.text)
    async def new_size(self, message: Message) -> Any:
        sizes = AddPizzaSize.sizes
        if len(sizes) != 4:
            if message.text.isdigit():
                if int(message.text) in sizes:
                    await message.answer("–¶–µ–π —Ä–æ–∑–º—ñ—Ä –≤–∂–µ —î")
                else:
                    if int(message.text) >= 27:
                        sizes.append(int(message.text))
                        await message.answer(
                            f"–†–æ–∑–º—ñ—Ä –¥–æ–¥–∞–Ω–æ.\n–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ {4 - len(sizes)}, –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ "
                            f"–¥–æ–¥–∞–≤–∞–Ω–Ω—è\n–Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'"
                        )
                    else:
                        await message.answer("–†–æ–∑–º—ñ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 27—Å–º.")
            else:
                await message.answer("–†–æ–∑–º—ñ—Ä –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º")
        else:
            await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–æ–∑–º—ñ—Ä—ñ–≤")

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class AddPizzaType(Scene, state="add_pizza_type"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        markup = ReplyKeyboardBuilder()
        markup.button(text="–¢–æ–Ω–∫–∞")
        markup.button(text="–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
        markup.button(text="–¢–æ–Ω–∫–∞ —ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—ñ—Ü–∏",
            reply_markup=markup.as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "–¢–æ–Ω–∫–∞")
    async def thin_type(self, message: Message, state: FSMContext) -> Any:
        await state.update_data(types=[0])
        await message.answer("–¢–∏–ø –¥–æ–¥–∞–Ω–æ.")
        return await self.wizard.goto(AddPizza)

    @on.message(F.text == "–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
    async def traditional_type(self, message: Message, state: FSMContext) -> Any:
        await state.update_data(types=[1])
        await message.answer("–¢–∏–ø –¥–æ–¥–∞–Ω–æ.")
        return await self.wizard.goto(AddPizza)

    @on.message(F.text == "–¢–æ–Ω–∫–∞ —ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–∞")
    async def both_types(self, message: Message, state: FSMContext) -> Any:
        await state.update_data(types=[0, 1])
        await message.answer("–¢–∏–ø –¥–æ–¥–∞–Ω–æ.")
        return await self.wizard.goto(AddPizza)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class AddPizzaTitle(Scene, state="add_pizza_title"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Ü–∏.")

    @on.message(F.text)
    async def add_pizza_title(self, message: Message, state: FSMContext) -> Any:
        await state.update_data(title=message.text)
        await message.answer("–ù–∞–∑–≤—É –¥–æ–¥–∞–Ω–æ.")
        return await self.wizard.goto(AddPizza)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")


class AddPizza(Scene, state="add_pizza"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        await message.answer(text="–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é", reply_markup=add_pizza)

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É")
    async def add_title(self, message: Message) -> Any:
        return await self.wizard.goto(AddPizzaTitle)

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ —Ç–∏–ø")
    async def add_type(self, message: Message) -> Any:
        return await self.wizard.goto(AddPizzaType)

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä")
    async def add_size(self, message: Message) -> Any:
        return await self.wizard.goto(AddPizzaSize)

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ —Ü—ñ–Ω—É")
    async def add_price(self, message: Message) -> Any:
        return await self.wizard.goto(AddPizzaPrice)

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
    async def add_picture(self, message: Message) -> Any:
        return await self.wizard.goto(AddPizzaPhoto)

    @on.message(F.text == "‚úî –ì–æ—Ç–æ–≤–æ")
    async def done(self, message: Message) -> Any:
        return await self.wizard.goto(AddPizzaDone)

    @on.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
    async def cancel(self, message: Message, state: FSMContext) -> Any:
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return await self.wizard.goto(CatalogSettings)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class CatalogSettings(Scene, state="catalog_settings"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:
        markup = ReplyKeyboardBuilder()
        markup.button(text="–î–æ–¥–∞—Ç–∏ –ø—ñ—Ü—É")
        markup.button(text="–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –ø—ñ—Ü–∏")
        markup.button(text="üö´ –í–∏—Ö—ñ–¥")
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é",
            reply_markup=markup.adjust(2, 1).as_markup(resize_keyboard=True)
        )

    @on.message(F.text == "üö´ –í–∏—Ö—ñ–¥")
    async def cancel(self, message: Message, state: FSMContext) -> Any:
        await message.answer(
            "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.",
            reply_markup=main,
        )
        await state.set_state(StartStatus.choose)
        await self.wizard.leave()

    @on.message(F.text == "–î–æ–¥–∞—Ç–∏ –ø—ñ—Ü—É")
    async def add_pizza(self, message: Message) -> Any:
        await self.wizard.goto(AddPizza)

    @on.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –ø—ñ—Ü–∏")
    async def change_pizza(self, message: Message) -> Any:
        await self.wizard.goto(ChangePizza)

    @on.message(F)
    async def unknown_command(self, message: Message) -> Any:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


class CheckCode(Scene, state="check_code"):
    @on.message.enter()
    async def on_enter(self, message: Message) -> Any:

        await message.answer(
            text="–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥",
            reply_markup=ReplyKeyboardRemove()
        )

    @on.message(F.text)
    async def check_code(self, message: Message, state: FSMContext) -> Any:
        if message.text == CODE:
            await self.wizard.goto(CatalogSettings)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        else:
            await message.answer(text="–ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥")
            await message.answer(
                "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.",
                reply_markup=main,
            )
            await state.set_state(StartStatus.choose)

    @on.message(F)
    async def unknown_command(self, message: Message) -> None:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")


router = Router(name=__name__)

user_data = {}

router.message.register(CatalogScene.as_handler(), F.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", StartStatus.choose)
router.message.register(CheckCode.as_handler(), F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", StartStatus.choose)


@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.",
        reply_markup=main,
    )

    await state.set_state(StartStatus.choose)


@router.message(F.text == "–ì–æ—Ç–æ–≤–æ", SendData.sending)
async def sending(message: Message, state: FSMContext):
    data = await state.get_data()
    await bot.send_contact(chat_id=CHANNEL_FOR_RECEIVING_ORDERS, phone_number=data["phone_num"], first_name=data["contact_name"])
    markup = InlineKeyboardBuilder()
    markup.button(
        text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É",
        url=f"https://t.me/{data['contact_username']}"
    )
    await bot.send_location(chat_id=CHANNEL_FOR_RECEIVING_ORDERS, latitude=data["latitude"], longitude=data["longitude"],
                            reply_markup=markup.as_markup())

    await bot.send_photo(
        chat_id=CHANNEL_FOR_RECEIVING_ORDERS,
        photo=FSInputFile(
            path=data["pizza"]["imageUrl"]
        ),
        caption=f'''{data["pizza"]["title"]}\n
            –¶—ñ–Ω–∞ ‚Äì {data["total_price"]} –≥—Ä–Ω.\n
            –¢–∏–ø ‚Äì {data["type"]}\n
            –†–æ–∑–º—ñ—Ä ‚Äì {data["size"]} —Å–º.\n
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å ‚Äì {data["numberOf"]} —à—Ç.\n
            –ó–∞–º–æ–≤–Ω–∏–∫ ‚Äì <a href="https://t.me/{data["contact_username"]}">{data["contact_name"]}</a>''',
        parse_mode="HTML",
    )

    await message.answer(text="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()
    await message.answer(
        "–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.",
        reply_markup=main,
    )
    await state.set_state(StartStatus.choose)


@router.message(F, StartStatus.choose)
async def unknown(message: Message):
    await message.answer("–ù–µ —Ä–æ–∑—É–º—ñ—é.")
